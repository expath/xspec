#summary Getting Started with XSpec
#labels Phase-Deploy

=Contents=

<wiki:toc max_depth="2" />

=Introduction=
This page demonstrates how to download, install, and use XSpec.  We will test an XSLT stylesheet and an XQuery query.  The examples are in the `tutorial` directory of the XSpec download.

==Requirements==
XSpec requires the Saxon XSLT and XQuery processors.  You probably already have them, but if you don't, get them from [http://saxon.sourceforge.net/ here].

=Installation=
To get started:

  # Download the current version of XSpec from the [http://code.google.com/p/xspec/downloads/list download page].  Unzip the archive somewhere accessible.  For this tutorial we'll assume that XSpec is in `c:\xspec\` directory (Unix users can translate this.).  
  # Open xspec.bat in your favorite text editor.  Change the value on line 3 to the location of your saxon jar.  (Unix users can edit the same line of xspec.sh.)
  # Open up a command prompt.  Navigate to the XSpec executable directory, and test the batch script:
  {{{ > xspec.bat }}}

You should get a usage summary:

{{{
 Usage:
   xspec filename [coverage]
     filename should specify an XSpec document
     if coverage is specified, outputs test coverage report
}}}

=Your First Test Suite=

Now that we have XSpec installed, we're ready to try it out.
XSpec comes with a sample of XSLT stylesheet to test and its
sample test suite, both of which are in the `tutorial` directory.

If you want to have a look at them online, you can view them
directly from the repository:
[http://code.google.com/p/xspec/source/browse/trunk/tutorial/escape-for-regex.xslt the tested stylesheet] and
[http://code.google.com/p/xspec/source/browse/trunk/tutorial/escape-for-regex.xspec the sample test suite].

=Running a Test Suite=

First, Copy the `c:\xspec\tutorial` subdirectory somewhere where you can work in it.  For the purposes of this tutorial, we'll say it's in `c:\home\tutorial\`.  Navigate to that directory and run the command:

{{{
> c:\xspec\xspec.bat escape-for-regex.xspec
}}}

If everything works correctly, an HTML report will appear in your browser.  The output in the shell should look like this:

{{{
C:\home\tutorial>c:\xspec\xspec.bat escape-for-regex.xspec
Creating Test Stylesheet...
"C:\home\tutorial\xspec\escape-for-regex.xsl"
escape-for-regex.xspec

Running Tests...
Testing with SAXON 9.1.0.8
Test simple patterns
..When encountering parentheses
escape them.
..When encountering a whitespace character class
escape the backslash
result should have one more character than source
When processing a list of phrases
All phrase elements should remain
String should be escaped and status attribute should be added
      FAILED

Formatting Report...
passed: 4 / pending: 0 / failed: 1 / total: 5
Done.
}}}

And the HTML report should look like this:  (xxx Add link to HTML report)  If you got an error, check to make sure that the path to the saxon jar is correct.  If you are still having issues, ask for help on the [http://groups.google.com/group/xspec-users XSpec mailing list].

As you can see, some of the tests have failed.  We'll come back to that.  For now, note that you invoke the XSpec script against the _test_, not the stylesheet.  The stylesheet filename is specified on the `/x:description/@stylesheet` attribute in the XSpec document.

If everything worked, there should be a new `xspec` subdirectory in `c:\home\tutorial\` (or your equivalent).  It contains three files generated by XSpec:

   * *`escape-for-regex.xsl`*  The XSpec test in XSLT form.  
   * *`escape-for-regex-result.xml`*  The test results in XML format.
   * *`escape-for-regex.html`*  The human-readable HTML test report.  Most of the time, this is the only file out of these three that you'll care about.

For more information about how the XSpec tests are run, see RunningScenarios. 

=Working With XSpec Documents=

Open [http://code.google.com/p/xspec/source/browse/trunk/tutorial/escape-for-regex.xslt escape-for-regex.xslt] and [http://code.google.com/p/xspec/source/browse/trunk/tutorial/escape-for-regex.xspec escape-for-regex.xspec] in your favorite XML editor.  The transform has a single function and a couple of templates that we're testing.  

The XSpec document has two top-level scenarios that test the function and the templates respectively.  Scenarios can be nested -- and the first one is, testing two aspects of the function `functx:escape-for-regex()`.  A function is tested by using an `<x:call/>`, passing it a parameter using an `<x:param/>`.  Our expectations about how the functions should behave are captured by `<x:expect/>`s.  A common case is simply testing for equality -- given a certain input, we expect a certain output.  Another common case is testing the result with an XPath expression.  The second nested scenario does just this.  Note that we can have as many expectations as we want within a scenario.

The second top-level scenario tests the templates in the transform.  It has two expectations -- the first a simple XPath test, and the second demonstrating how we can directly compare a nodeset to the output by including it as descendants of an `<x:expect/>`.

For a more detailed description of how a XSpec document is put together, see WritingScenarios.

One of the tests failed, so let's fix it.  When a test fails in XSpec, the report shows both the actual result and the expected result side-by-side, with differences highlighted in red.  From this report, we can see that the failed scenario is labeled "When processing a list of phrases" and the specific expectation that failed is labeled "Strings should be escaped and status attribute should be added."  The difference is that the `@status` attributes are wrong.  Change line 35 of the transform to read:

{{{
   <phrase status="{if (. = $escaped-text) then 'same' else 'changed'}">
}}}

Save the transform, and re-run the XSpec test.  All tests should be green. 

=Tips=

There are many ways to integrate XSpec into your workflow.  Here are a few tips:

  * Add the XSpec executable directory to your system path.
  * By default, XSpec stores its result documents in the subdirectory "xspec" of the folder where the particular stylesheet that you are testing resides.  You may want to change the variable TEST_DIR to the system temporary folder: `SET TEST_DIR=%TEMP%\xspec`.  This works well when you are integrating the XSpec with Oxygen and don't want to clutter up your project folders with XSpec results.
  * [http://www.wordsinboxes.com/2008/12/getting-started-with-xspec.html Integrate XSpec into oXygen XML editor].